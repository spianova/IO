public interface Flower {
    void displayFlowerInfo();
}


public class ConcreteFlower implements Flower{
    private String color;
    private String type;
    private String size;

    public ConcreteFlower(String color, String type, String size) {
        this.color = color;
        this.type = type;
        this.size = size;
    }
    @Override
    public void displayFlowerInfo() {
        System.out.println("Flower type: " + type + ", color: " + color + ", size: " + size);
    }
}


import java.util.HashMap;
import java.util.Map;

public class FlowerFactory {
    private Map<String, Flower> flowers = new HashMap<>();
    public Flower getFlower(String key){
        Flower flower = flowers.get(key);
        if(flower == null){
            String[] parts = key.split("-");
            flower = new ConcreteFlower(parts[0], parts[1], parts[2]);
            flowers.put(key, flower);
        }
        return flower;
    }
}


public class ContextualFlower {
    private int x;
    private int y;
    private Flower flower;

    public ContextualFlower(int x, int y, Flower flower) {
        this.x = x;
        this.y = y;
        this.flower = flower;
    }
    public void displayFlowerInfo(){
        flower.displayFlowerInfo();
        System.out.println("located at: (" + x + ", " + y + ")");
    }
}


public class FlowerShop {
    public static void main(String[] args) {
        FlowerFactory factory = new FlowerFactory();

        Flower rose = factory.getFlower("red-rose-medium");
        ContextualFlower rose1 = new ContextualFlower(10, 20, rose);
        ContextualFlower rose2 = new ContextualFlower(15, 35, rose);

        rose1.displayFlowerInfo();
        rose2.displayFlowerInfo();
    }
}
