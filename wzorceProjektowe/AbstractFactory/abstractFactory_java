interface Monitor {
    void assemble();
}

interface GPU {
    void assemble();
}

class MsiMonitor implements Monitor {
    @Override
    public void assemble() {
        System.out.println("Assembling MSI Monitor");
    }
}

class AsusMonitor implements Monitor {
    @Override
    public void assemble() {
        System.out.println("Assembling ASUS Monitor");
    }
}

class MsiGPU implements GPU {
    @Override
    public void assemble() {
        System.out.println("Assembling MSI GPU");
    }
}

class AsusGPU implements GPU {
    @Override
    public void assemble() {
        System.out.println("Assembling ASUS GPU");
    }
}

abstract class Company {
    abstract GPU createGPU();
    abstract Monitor createMonitor();
}

class MsiManufacturer extends Company {
    @Override
    public GPU createGPU() {
        return new MsiGPU();
    }

    @Override
    public Monitor createMonitor() {
        return new MsiMonitor();
    }
}

class AsusManufacturer extends Company {
    @Override
    public GPU createGPU() {
        return new AsusGPU();
    }

    @Override
    public Monitor createMonitor() {
        return new AsusMonitor();
    }
}

public class Main {
    public static void main(String[] args) {
        Company msiFactory = new MsiManufacturer();
        Company asusFactory = new AsusManufacturer();

        Monitor msiMonitor = msiFactory.createMonitor();
        msiMonitor.assemble();

        GPU asusGpu = asusFactory.createGPU();
        asusGpu.assemble();
    }
}
