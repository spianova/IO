interface Transport {
    String deliver();
}

class Ship implements Transport {
    @Override
    public String deliver() {
        return "Delivering by sea in a ship";
    }
}

class Truck implements Transport {
    @Override
    public String deliver() {
        return "Delivering by land in a truck";
    }
}

class Plane implements Transport {
    @Override
    public String deliver() {
        return "Delivering by air in a plane";
    }
}

abstract class Logistics {
    abstract Transport createTransport();
}

class RoadLogistics extends Logistics {
    @Override
    public Transport createTransport() {
        return new Truck();
    }
}

class SeaLogistics extends Logistics {
    @Override
    public Transport createTransport() {
        return new Ship();
    }
}

class AirLogistics extends Logistics {
    @Override
    public Transport createTransport() {
        return new Plane();
    }
}

public class Main {
    public static void main(String[] args) {
        Logistics roadLogistics = new RoadLogistics();
        System.out.println(roadLogistics.createTransport().deliver());

        Logistics seaLogistics = new SeaLogistics();
        System.out.println(seaLogistics.createTransport().deliver());

        Logistics airLogistics = new AirLogistics();
        System.out.println(airLogistics.createTransport().deliver());
    }
}
